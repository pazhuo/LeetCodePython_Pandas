/*
Giving a list of number nums=[1,4,8,13], and integer k=5, allow any numbers in the list
to be increased and total increase <=5, return maximum possible frequency of an element after perform k increase 

Example 2:

Input: nums = [1,4,8,13], k = 5
Output: 2
Explanation: There are multiple optimal solutions:
- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.
- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.
- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.
*/


/*
Complexity of below solution:
Time complexity: O(nlogn)
Space complexity: O(nlogn)
Depends on language you use. Sorting need some extra space.
*/


class Solution:
    def maxFrequency(self, nums: List[int], k: int) -> int:
        nums.sort()
        left = right = result = total = 0

        while right < len(nums):
            total += nums[right]

            while nums[right] * (right-left+1) > total + k:
                total -= nums[left]
                left +=1


            result = max(result, right - left + 1)
            right +=1

        return result
